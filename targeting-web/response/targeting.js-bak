var test_url = "http://10.0.3.105/test.json";
var _targetDivId = null;
var _onLoadingStartFunction = onAjaxLoadingStart;
var _onLoadingFinishFunction = onAjaxLoadingFinish;

function showTargetBlock(targetDivId){
	_targetDivId = targetDivId;
	
	getTargetData(test_url, onAjaxSuccess, onAjaxError, onAjaxTimeout);
}

function onAjaxLoadingStart(){
	var targetElement = document.getElementById(_targetDivId);
    targetElement.innerHTML = "<p>Loading ...</p>";
}

function onAjaxLoadingFinish(){
	var targetElement = document.getElementById(_targetDivId);
    targetElement.innerHTML = "";
}

function onAjaxSuccess(response, responseType){
    _onLoadingFinishFunction();
	var html = parseJSON(response);
	var targetElement = document.getElementById(_targetDivId);

	//if (responseType == "json"){	
		targetElement.innerHTML = html;
	//}else{
	//	targetElement.innerHTML = "<p>wrong response type: " + responseType + "</p>";
	//}
}

function onAjaxError(status, response, responseType){
    _onLoadingFinishFunction();
	var targetElement = document.getElementById(_targetDivId);
	targetElement.innerHTML = "<p>error: response code: " + status + "</p>";
}

function onAjaxTimeout(url){
	var targetElement = document.getElementById(_targetDivId);
	targetElement.innerHTML = "<p>timeout</p>";
}

function getCallParameters(){
	return "";
}

function getTargetData(url, successFunction, errorFunction, timeoutFunction){
	var xhr = getXHR();
	url += getCallParameters();
	xhr.open("GET", url, true);
	xhr.setRequestHeader('Content-Type', "application/x-www-form-urlencoded; charset=UTF-8");
	xhr.timeout = 2000; //2 sec
	xhr.onreadystatechange = function (){
		if (xhr.readyState == 4){
			if (xhr.status == 200){ //success
				successFunction(xhr.response, xhr.responseType);
			}else{ //error
				errorFunction(xhr.status, xhr.response, xhr.responseType);
			}
		}
	}
	xhr.ontimeout = function (){
		if (typeof timeoutFunction !== 'undefined'){
			timeoutFunction(url);
		}else{
			errorFunction('408' /* request timeout */, '', '');
		}
	}
    _onLoadingStartFunction();
	xhr.send(url);
}
//from jquery
// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

function getXHR(){
	return (window.ActiveXObject !== undefined ?
	    createActiveXHR()
	    :
	    // For all other browsers, use the standard XMLHttpRequest object
	    createStandardXHR());
}

function parseJSON(json){
    var data = "";
    data = parseJSONToObject(json);
	
	var html = "";
	for (i=0; i<data.length; i++){
		var obj = data[i];
		var html_link = '<a href="';
		var link_present = false;
		
		html += '<div class="_targeting_block">';
		
		if (typeof obj.link !== 'undefined'){
			link_present = true;
			html_link += obj.link.url + '">';
		}
		
		html += '<div class="_targeting_img">';
		if (typeof obj.image !== 'undefined'){
			if (link_present){
				html += html_link;
			}
			html += '<img src="' + obj.image + '"/>';
			if (link_present){
				html += '</a>';
			}
		}
		html += '</div>';
		
		html += '<div class="_targeting_link">';
		if (link_present){
			html += html_link + obj.link.text + '</a>';
		}
		html += '</div>';
		
		html += '<div class="_targeting_text">';
		if (typeof obj.text !== 'undefined'){
			if (link_present){
				html += html_link;
			}
			html += obj.text;
			if (link_present){
				html += '</a>';
			}
		}
		html += '</div>';
		html += '</div>'; //_targeting_block
	}
	return html;
}

//function from jquery
function parseJSONToObject(data){
	// Attempt to parse using the native JSON parser first
	if ( window.JSON && window.JSON.parse ) {
		// Support: Android 2.3
		// Workaround failure to string-cast null input
		return window.JSON.parse( data + "" );
	}

	var requireNonComma,
		depth = null,
		str = jQuery.trim( data + "" );

	// Guard against invalid (and possibly dangerous) input by ensuring that nothing remains
	// after removing valid tokens
	return str && !jQuery.trim( str.replace( rvalidtokens, function( token, comma, open, close ) {

		// Force termination if we see a misplaced comma
		if ( requireNonComma && comma ) {
			depth = 0;
		}

		// Perform no more replacements after returning to outermost depth
		if ( depth === 0 ) {
			return token;
		}

		// Commas must not follow "[", "{", or ","
		requireNonComma = open || comma;

		// Determine new depth
		// array/object open ("[" or "{"): depth += true - false (increment)
		// array/object close ("]" or "}"): depth += false - true (decrement)
		// other cases ("," or primitive): depth += true - true (numeric cast)
		depth += !close - !open;

		// Remove this token
		return "";
	}) ) ?
		( Function( "return " + str ) )() :
		jQuery.error( "Invalid JSON: " + data );
}
